{"version":3,"sources":["context/city/cityContext.jsx","components/Navigation/Navigation.jsx","components/Portal/Portal.jsx","components/SelectList/SelectList.jsx","reqests/geolocation/usePosition.jsx","components/CityDefinition/CityDefinition.jsx","reqests/geolocation/cityGeolocation.js","App.jsx","serviceWorker.js","context/city/cityReducer.js","context/type.js","reqests/weatherReqest/weatherReqest.js","components/WeatherItem/WeatherItem.jsx","components/Preloader/Preloader.jsx","components/NoCity/Nocity.jsx","reqests/wikiReqest/wikiReqest.js","reqests/imageReqest/imageReqest.js","components/InfoItem/InfoItem.jsx","components/ImgItem/ImgItem.jsx","index.jsx","context/city/CityState.jsx","pages/Home/Home.jsx","pages/CityInfo/CityInfo.jsx"],"names":["CityContext","createContext","Navigation","setModal","city","useContext","className","onClick","exact","to","defaultProps","Portal","el","document","createElement","body","appendChild","this","removeChild","children","props","ReactDOM","createPortal","Component","Option","Select","SelectList","sel","setSel","list","placeholder","actSelect","value","showSearch","optionFilterProp","onChange","filterOption","input","option","toLowerCase","indexOf","map","inner","name","key","id","console","log","type","defaultSettings","enableHighAccuracy","timeout","Infinity","maximumAge","CityDefinition","modal","selectCity","useState","watch","settings","position","setPosition","error","setError","coords","timestamp","latitude","longitude","accuracy","onError","message","useEffect","geo","navigator","geolocation","watcher","watchPosition","getCurrentPosition","clearWatch","usePosition","dataCity","result","cityList","undefined","Math","floor","coord","lat","lon","cityGeolocation","App","timesOfDay","hour","Date","getHours","hourDefinition","Boolean","window","location","hostname","match","cityReducer","state","action","payload","weatherReqest","setData","a","CITY","axios","get","res","data","WeatherItem","dt","src","weather","icon","alt","description","main","round","temp","dt_txt","split","Preloader","NoCity","wikiReqest","info","Object","values","query","pages","extract","imageReqest","items","item","push","link","InfoItem","dataInfo","ImgItem","dataImg","random","render","useReducer","localStorage","getItem","dispatch","setItem","Provider","path","component","load","setLoad","setDataInfo","setDataImg","Promise","all","then","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.58443b97.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\nexport const CityContext = createContext()","import React, {useContext} from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { CityContext } from '../../context/city/cityContext'\r\nimport './Navigation.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const Navigation = ({setModal}) => {\r\n    const { city } = useContext(CityContext)\r\n    return(\r\n        <nav className='navigation'>\r\n            <div className='navigation__select-city' onClick={() => setModal(true)}>\r\n                {city ? <><p className='navigation__city-text'>Select city: </p> <p className='navigation__city-text'>{city}</p> </> : <p className='navigation__city-text'>Click to select a city</p>}\r\n            </div>\r\n            <div className='navigation__section'>\r\n                <NavLink exact to='/weather'>Weather</NavLink>\r\n                <NavLink to='/city-info'>City Information</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavigation.propTypes = {\r\n    setModal: PropTypes.func\r\n}\r\n\r\nNavigation.defaultProps = {\r\n    setModal: () => {}\r\n}","import  { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport class Portal extends Component {\r\n\r\n  el = document.createElement('div');\r\n\r\n  componentDidMount() {\r\n    document.body.appendChild(this.el);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.body.removeChild(this.el);\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n\r\n    return ReactDOM.createPortal(children, this.el);\r\n  }\r\n}\r\n","import React from 'react'\r\nimport 'antd/dist/antd.css'\r\nimport { Select } from 'antd'\r\nimport { Button } from 'antd'\r\nimport './SelectList.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst { Option } = Select\r\n\r\nexport const SelectList = ({ sel, setSel, list, placeholder, actSelect, setModal }) =>{\r\n    const apply = () =>{\r\n        actSelect(sel)\r\n        setModal(false)\r\n        console.log(sel)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Select\r\n                value={sel}\r\n                showSearch\r\n                placeholder={placeholder}\r\n                optionFilterProp='children'\r\n                onChange={(value) => setSel(value)}\r\n                filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                }\r\n            >\r\n                {list.map(inner=>(\r\n                    <Option onClick={() => setSel(inner.name)} key={inner.id} value={inner.name}>{inner.name}</Option>\r\n                ))}\r\n            </Select>\r\n            <div className='select__button-group'>\r\n                <Button className='select__button' onClick={apply} type='primary'>To apply</Button>\r\n                <Button className='select__button' onClick={() => setModal(false)}>Cancel</Button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nSelectList.propTypes = {\r\n    sel: PropTypes.string,\r\n    setSel: PropTypes.func,\r\n    list: PropTypes.arrayOf(PropTypes.object),\r\n    placeholder: PropTypes.string,\r\n    actSelect: PropTypes.func,\r\n    setModal: PropTypes.func\r\n}\r\n\r\nSelectList.defaultProps = {\r\n    sel: '',\r\n    setSel: () => {},\r\n    list: [],\r\n    placeholder: '',\r\n    actSelect: () => {},\r\n    setModal: () => {}\r\n}","import {useState, useEffect} from 'react';\r\n\r\nconst defaultSettings = {\r\n  enableHighAccuracy: false,\r\n  timeout: Infinity,\r\n  maximumAge: 0,\r\n};\r\n\r\nexport const usePosition = (watch = false, settings = defaultSettings) => {\r\n  const [position, setPosition] = useState({});\r\n  const [error, setError] = useState(null);\r\n\r\n  const onChange = ({coords, timestamp}) => {\r\n    setPosition({\r\n      latitude: coords.latitude,\r\n      longitude: coords.longitude,\r\n      accuracy: coords.accuracy,\r\n      timestamp,\r\n    });\r\n  };\r\n\r\n  const onError = (error) => {\r\n    setError(error.message);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const geo = navigator.geolocation;\r\n    if (!geo) {\r\n      setError('Geolocation is not supported');\r\n      return;\r\n    }\r\n\r\n    let watcher = null;\r\n    if (watch) {\r\n      watcher = geo.watchPosition(onChange, onError, settings);\r\n    } else {\r\n      geo.getCurrentPosition(onChange, onError, settings);\r\n    }\r\n\r\n    return () => watcher && geo.clearWatch(watcher);\r\n  }, [settings, watch]);\r\n\r\n  return {...position, error};\r\n};","import React, {useContext, useState} from 'react'\r\nimport { Portal } from '../Portal/Portal'\r\nimport { CityContext } from '../../context/city/cityContext'\r\nimport './CityDefinition.scss'\r\nimport { SelectList } from '../SelectList/SelectList'\r\nimport cityList from '../../reqests/city.list.json'\r\nimport { usePosition } from '../../reqests/geolocation/usePosition'\r\nimport { cityGeolocation } from '../../reqests/geolocation/cityGeolocation'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const CityDefinition = ({modal, setModal}) =>{\r\n\r\n    const { city, selectCity } = useContext(CityContext)\r\n\r\n    const [sel, setSel] = useState()\r\n    const { latitude, longitude, error } = usePosition()\r\n\r\n    const dataCity = () =>{\r\n        const result = cityGeolocation(latitude, longitude, error, cityList)\r\n        setSel(result)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            { modal &&\r\n                <Portal>\r\n                    <div className='modalOverlay'>\r\n                        <div className='modalOverlay__window'>\r\n                            {city ? \r\n                            <div>\r\n                                <p className='modalOverlay__header'>Weather is presented on the city of<span> </span>\r\n                                <span className='modalOverlay__activeCity'>{city}</span>\r\n                                </p>\r\n                                <p className='modalOverlay__header'>  \r\n                                <span onClick={dataCity} className='modalOverlay__activeCity'>Click</span> <span> </span>\r\n                                 to automatically override your city\r\n                                </p>\r\n                            </div>\r\n                            :\r\n                            <p className='modalOverlay__header'>To define a city, <span> </span>\r\n                            <span onClick={dataCity} className='modalOverlay__activeCity'>press</span>\r\n                            , or select a city manually\r\n                            </p>\r\n                            }\r\n                            <SelectList sel={sel} setSel={setSel} setModal={setModal} list={cityList} placeholder='Enter the name of the city' actSelect={selectCity} />\r\n                        </div>\r\n                    </div>\r\n                </Portal>\r\n            \r\n            }\r\n        </> \r\n    )\r\n}\r\n\r\nCityDefinition.propTypes = {\r\n    modal: PropTypes.bool,\r\n    setModal: PropTypes.func\r\n}\r\n\r\nCityDefinition.defaultProps = {\r\n    modal: false,\r\n    setModal: () =>{}\r\n}\r\n","export const cityGeolocation = (latitude, longitude, error, cityList) => {\r\n    let city = undefined\r\n    cityList.map(inner =>{\r\n        if((Math.floor(latitude * 100)/100) === (Math.floor(inner.coord.lat * 100) /100) && (Math.floor(longitude * 100) / 100) === (Math.floor(inner.coord.lon * 100) / 100)){\r\n            city = inner.name\r\n            return city\r\n        }\r\n        return city\r\n    })\r\n    if(city){\r\n        return city\r\n    }\r\n    else {\r\n        console.log(error)\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { Navigation } from './components/Navigation/Navigation'\r\nimport { CityDefinition } from './components/CityDefinition/CityDefinition'\r\nimport './App.scss'\r\n\r\n\r\n\r\nfunction App({ children }) {\r\n\r\n  const hourDefinition = () =>{\r\n    let color\r\n    const hour = new Date().getHours()\r\n    if (0<=hour && hour<6){color='night'}\r\n    else if (6<=hour && hour<12){color='morning'}\r\n    else if (12<=hour && hour<18){color='day'}\r\n    else {color='evening'}\r\n    return color\r\n  }\r\n\r\n  const timesOfDay = hourDefinition()\r\n\r\n  const [modal, setModal] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <CityDefinition modal={modal} setModal={setModal} />\r\n      <Navigation setModal={setModal} />\r\n      <div className={`content-container content-container_${timesOfDay}`}>\r\n        {children}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SELECT_CITY } from '../type'\r\n\r\nexport const cityReducer = (state, action) =>{\r\n    switch (action.type){\r\n        case SELECT_CITY:\r\n            return action.payload\r\n\r\n    default: return state\r\n    }\r\n}","export const SELECT_CITY = 'SELECT_CITY'\r\n\r\nexport const DOWNLOAD_DATA_CITY = 'DOWNLOAD_DATA_CITY'","import axios from 'axios'\r\n\r\nconst BASE_PATH = 'https://api.openweathermap.org/data/2.5/'\r\nconst CITY_PATH = 'forecast?q='\r\nconst KEY_PATH = '&appid='\r\nconst KEY = '79a0c4fb79ec5d4bd9703776da9ba236'\r\nconst UNITS = '&units=metric'\r\n\r\nexport const weatherReqest = async (city, setData) => {\r\n    const CITY = city\r\n    const res = await axios.get(`${BASE_PATH}${CITY_PATH}${CITY}${KEY_PATH}${KEY}${UNITS}`)\r\n    setData(res.data.list)\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './WeatherItem.scss'\r\n\r\nexport const WeatherItem = ({data}) =>{\r\n    return(\r\n        <>\r\n            {data.map(inner =>(\r\n                <div className='weather-item' key={inner.dt}>\r\n                    <div className='weather-item__main'>\r\n                        <img className='weather-item__img' src={`http://openweathermap.org/img/wn/${inner.weather[0].icon}@2x.png`} alt={inner.weather[0].description} />\r\n                        <p className='weather-item__header weather-item__inner-padding'>{inner.weather[0].main}</p>\r\n                    </div>\r\n                    <div className='weather-item__additional'>\r\n                        <p className='weather-item__description'>{inner.weather[0].description}</p>\r\n                        <p className='weather-item__temp weather-item__inner-padding'>Temperature: {Math.round(inner.main.temp)}°C</p>\r\n                        <p className='weather-item__data-day weather-item__inner-padding'>Date: {inner.dt_txt.split(' ')[0].split('-')[2]}.{inner.dt_txt.split(' ')[0].split('-')[1]}</p>\r\n                        <p className='weather-item__hour weather-item__inner-padding'>Time: {inner.dt_txt.split(' ')[1].split(':')[0]}:00</p>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nWeatherItem.propTypes = {\r\n    data: PropTypes.arrayOf(PropTypes.object)\r\n}\r\n\r\nWeatherItem.defaultProps = {\r\n    data: []\r\n}","import React from 'react'\r\nimport './Preloader.scss'\r\n\r\nexport const Preloader = () =>{\r\n    return(\r\n    <div className=\"preloader\">\r\n        <div className=\"preloader__obj1\"></div>\r\n        <div className=\"preloader__obj1\"></div>\r\n        <div className=\"preloader__obj1\"></div>\r\n        <div className=\"preloader__obj1\"></div>\r\n        <div className=\"preloader__obj2\"></div>\t\t\r\n        <div className=\"preloader__obj3\"></div>\r\n    </div>\r\n\r\n\r\n\r\n    )\r\n}","import React from 'react'\r\nimport './NoCity.scss'\r\n\r\nexport const NoCity = () =>{\r\n    return(\r\n        <div className='notSelected__block'>\r\n            <div className='notSelected__container'>\r\n                <h1 className='notSelected__text'>No city selected</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import axios from 'axios'\r\n\r\nconst BASE_PATH = 'https://en.wikipedia.org/w/api.php?Access-Control-Allow-Origin&format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&origin=*&titles='\r\n\r\nexport const wikiReqest = async (city, setData) => {\r\n    const CITY = city\r\n    const res = await axios.get(`${BASE_PATH}${CITY}`)\r\n    let info = Object.values(res.data.query.pages)[0].extract\r\n    setData(info)\r\n}\r\n","import axios from 'axios'\r\n\r\nconst BASE_PATH = 'https://www.googleapis.com/customsearch/v1?'\r\nconst KEY = 'AIzaSyBlO8ZzURu5YqIP-DxfH10oqE_W_TtoX-8&cx=001909621778680338983%3Aqoni1zwjite'\r\nconst CX = '001909621778680338983%3Aqoni1zwjite'\r\nconst NUM_IMG = '3'\r\nconst OTHER_SETTINGS = 'searchType=image&fileType=jpg&imgSize=xlarge&alt=json'\r\n\r\nexport const imageReqest = async (city, setData) => {\r\n    const CITY = city\r\n    const res = await axios.get(`${BASE_PATH}key=${KEY}&cx=${CX}&num=${NUM_IMG}&${OTHER_SETTINGS}&q=${CITY}`)\r\n    const data = []\r\n    res.data.items.map(item =>{\r\n        data.push(item.link)\r\n        return data\r\n    })\r\n    setData(data)\r\n}\r\n","import React from 'react'\r\nimport './InfoItem.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const InfoItem = ({ dataInfo, city }) =>{\r\n    return(\r\n        <article className='info-block__info-section' >\r\n            <h1 className='info-block__city'> {city} </h1>\r\n            <p className='info-block__text'> {dataInfo} </p>\r\n        </article>\r\n    )\r\n}\r\n\r\nInfoItem.propTypes = {\r\n    dataInfo: PropTypes.string,\r\n    city: PropTypes.string\r\n}\r\n\r\nInfoItem.defaultProps = {\r\n    dataInfo: null,\r\n    city: null\r\n}","import React from 'react'\r\nimport './ImgItem.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const ImgItem = ({ dataImg, city }) =>{\r\n    return(\r\n        <aside className='info-block__img-section'>\r\n            {dataImg.map(inner=>(\r\n                <div className='info-block__img-item' key={Math.floor(Math.random()*1000)}>\r\n                    <img className='info-block__img' src={inner} alt={city} />\r\n                </div>\r\n            ))}\r\n        </aside>\r\n    )\r\n}\r\n\r\nImgItem.propTypes = {\r\n    dataImg: PropTypes.arrayOf(PropTypes.string),\r\n    city: PropTypes.string\r\n}\r\n\r\nImgItem.defaultProps = {\r\n    dataImg: [],\r\n    city: null\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport './scss-components/const.scss'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\nimport { CityState } from './context/city/CityState'\r\nimport { Home } from './pages/Home/Home'\r\nimport { CityInfo } from './pages/CityInfo/CityInfo'\r\n\r\n\r\nReactDOM.render(\r\n    <CityState>\r\n        <BrowserRouter>\r\n            <App>\r\n                <Switch>\r\n                    <Route exact path ='/weather' component={Home} />\r\n                    <Route path ='/city-info' component={CityInfo} />\r\n                </Switch>\r\n            </App>\r\n        </BrowserRouter>\r\n    </CityState>\r\n    \r\n    , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","import React, {useReducer, useEffect} from 'react'\r\nimport { cityReducer } from './cityReducer'\r\nimport { CityContext } from './cityContext'\r\nimport { SELECT_CITY } from '../type'\r\n\r\nexport const CityState = ({children}) =>{\r\n    const [state, dispatch] = useReducer(cityReducer, localStorage.getItem('city') || '')\r\n\r\n    const selectCity = (city) =>{\r\n        dispatch({\r\n            type: SELECT_CITY,\r\n            payload: city\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        localStorage.setItem('city', state)\r\n    }, [state])\r\n\r\n    return(\r\n        <CityContext.Provider value={{\r\n            city: state, \r\n            selectCity\r\n        }} >\r\n            {children}\r\n        </CityContext.Provider>\r\n    )\r\n}","import React, { useEffect, useState, useContext } from 'react'\r\nimport { weatherReqest } from '../../reqests/weatherReqest/weatherReqest'\r\nimport { WeatherItem } from '../../components/WeatherItem/WeatherItem'\r\nimport { CityContext } from '../../context/city/cityContext'\r\nimport { Preloader } from '../../components/Preloader/Preloader'\r\nimport { NoCity } from '../../components/NoCity/Nocity'\r\nimport './Home.scss'\r\n\r\n\r\n\r\nexport const Home = () =>{\r\n\r\n    const { city } = useContext(CityContext)\r\n    const [data, setData] = useState(null)\r\n    const [load, setLoad] = useState(true)\r\n\r\n    \r\n    useEffect(()=>{\r\n        if (city){\r\n            weatherReqest(city, setData)\r\n        }\r\n        \r\n        setLoad(false)\r\n    }, [city])\r\n\r\n    return(\r\n        <>\r\n            {load ? <div className='container-preload'> <Preloader /></div>\r\n            :\r\n                city ? \r\n                <section className='container-center'>\r\n                    {data && <WeatherItem data={data} />}\r\n                </section>\r\n                :\r\n                <section className='container-center'>\r\n                    <NoCity />\r\n                </section>\r\n            }\r\n        </>\r\n    )\r\n}   ","import React, { useEffect, useState, useContext } from 'react'\r\nimport { wikiReqest } from '../../reqests/wikiReqest/wikiReqest'\r\nimport { imageReqest } from '../../reqests/imageReqest/imageReqest'\r\nimport { CityContext } from '../../context/city/cityContext'\r\nimport { NoCity } from '../../components/NoCity/Nocity'\r\nimport { Preloader } from '../../components/Preloader/Preloader'\r\nimport { InfoItem } from '../../components/InfoItem/InfoItem'\r\nimport { ImgItem } from '../../components/ImgItem/ImgItem'\r\nimport './CityInfo.scss'\r\n\r\nexport const CityInfo = () =>{\r\n\r\n    const { city } = useContext(CityContext)\r\n    const [dataInfo, setDataInfo] = useState(null)\r\n    const [dataImg, setDataImg] = useState(null)\r\n    const [load, setLoad] = useState(true)\r\n\r\n    useEffect(()=>{\r\n        if (city){\r\n            Promise.all([\r\n                wikiReqest(city, setDataInfo),\r\n                imageReqest(city, setDataImg)\r\n            ])\r\n            .then(setLoad(false))\r\n            \r\n        }\r\n        setLoad(false)\r\n    }, [city])\r\n\r\n    return(\r\n        <>\r\n            {load ? <div className='container-preload'> <Preloader /></div>\r\n            :\r\n                city ? \r\n                    <section className='container-center info-block'>\r\n                        {dataImg && <ImgItem city={city} dataImg={dataImg} />}\r\n                        {dataInfo && <InfoItem city={city} dataInfo={dataInfo} />}\r\n                    </section>\r\n                :\r\n                    <section className='container-center'>\r\n                        <NoCity />\r\n                    </section>\r\n                \r\n            }\r\n        </>\r\n    )\r\n}"],"sourceRoot":""}